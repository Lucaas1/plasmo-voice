package su.plo.voice.api.server.connection;

import org.jetbrains.annotations.NotNull;
import su.plo.voice.api.server.event.connection.UdpClientConnectEvent;
import su.plo.voice.api.server.event.connection.UdpClientDisconnectedEvent;
import su.plo.voice.api.server.player.VoiceServerPlayer;
import su.plo.voice.api.server.socket.UdpServerConnection;

import java.util.Optional;
import java.util.UUID;

/**
 * Manages {@link UdpServerConnection}s and their secrets.
 * Also used to send Plasmo Voice related UDP packets to the players.
 * <br/>
 * Secrets are used to identify UDP connection owners.
 */
public interface UdpServerConnectionManager extends UdpConnectionManager<VoiceServerPlayer, UdpServerConnection> {

    /**
     * Gets the player UUID by secret.
     * <br/>
     * The secret is generated by invoking {@link #getSecretByPlayerId(UUID)}.
     *
     * @param secret The secret to look up the player.
     * @return The player UUID associated with the secret, if found.
     */
    Optional<UUID> getPlayerIdBySecret(@NotNull UUID secret);

    /**
     * Gets the stored secret or generates a new one for a player UUID.
     *
     * @param playerUUID The player UUID for which to get or generate a secret.
     * @return The secret associated with the player UUID.
     */
    @NotNull UUID getSecretByPlayerId(@NotNull UUID playerUUID);

    /**
     * Adds a connection to the connection map.
     * <br/>
     * This method calls {@link UdpClientConnectEvent} before adding the connection to the map.
     *
     * @param connection The UDP server connection to add.
     */
    void addConnection(@NotNull UdpServerConnection connection);

    /**
     * Removes a connection from the connection map.
     * <br/>
     * This method calls {@link UdpClientDisconnectedEvent} after removing the connection from the map.
     *
     * @param connection The UDP server connection to remove.
     * @return {@code true} if the connection was successfully removed, {@code false} if the connection was not found.
     */
    boolean removeConnection(@NotNull UdpServerConnection connection);

    /**
     * Removes a connection by player from the connection map.
     * <br/>
     * This method calls {@link UdpClientDisconnectedEvent} after removing the connection from the map.
     *
     * @param player The player associated with the connection to remove.
     * @return {@code true} if the connection was successfully removed, {@code false} if the connection was not found.
     */
    boolean removeConnection(@NotNull VoiceServerPlayer player);

    /**
     * Removes a connection by secret from the connection map.
     * <br/>
     * This method calls {@link UdpClientDisconnectedEvent} after removing the connection from the map.
     *
     * @param secret The secret associated with the connection to remove.
     * @return {@code true} if the connection was successfully removed, {@code false} if the connection was not found.
     */
    boolean removeConnection(UUID secret);

    /**
     * Clears all connections.
     * <br/>
     * This method calls {@link UdpClientDisconnectedEvent} for each connection.
     */
    void clearConnections();
}
