package su.plo.voice.api.proxy.connection;

import org.jetbrains.annotations.NotNull;
import su.plo.voice.api.proxy.player.VoiceProxyPlayer;
import su.plo.voice.api.proxy.socket.UdpProxyConnection;
import su.plo.voice.api.server.connection.UdpConnectionManager;

import java.util.Optional;
import java.util.UUID;

/**
 * Manages UDP proxy connections.
 */
public interface UdpProxyConnectionManager extends UdpConnectionManager<VoiceProxyPlayer, UdpProxyConnection> {

    /**
     * Retrieves the player's UUID by their remote secret.
     *
     * <p>
     *     Remote secret is a secret, received from the remote backend and used for communication between proxy and backend.
     * </p>
     *
     * @param remoteSecret The remote secret of the player.
     * @return An optional containing the player's UUID if found, otherwise empty.
     */
    Optional<UUID> getPlayerIdByRemoteSecret(UUID remoteSecret);

    /**
     * Retrieves the player's UUID by their proxy secret.
     *
     * <p>
     *     Proxy secret is a secret, generated by the proxy and used for communication between proxy and player.
     * </p>
     *
     * @param secret The proxy secret of the player.
     * @return An optional containing the player's UUID if found, otherwise empty.
     */
    Optional<UUID> getPlayerIdByProxySecret(UUID secret);

    /**
     * Retrieves the player's UUID by any of their secrets.
     *
     * @param secret Any of the player's secrets.
     * @return An optional containing the player's UUID if found, otherwise empty.
     */
    Optional<UUID> getPlayerIdByAnySecret(UUID secret);

    /**
     * Retrieves the proxy secret associated with a player's UUID.
     *
     * @param playerId The UUID of the player.
     * @return An optional containing the player's proxy secret if found, otherwise empty.
     */
    Optional<UUID> getProxySecretByPlayerId(UUID playerId);

    /**
     * Retrieves the remote secret associated with a player's UUID.
     *
     * @param playerId The UUID of the player.
     * @return An optional containing the player's remote secret if found, otherwise empty.
     */
    Optional<UUID> getRemoteSecretByPlayerId(UUID playerId);

    /**
     * Sets the player's remote secret for the given player UUID.
     *
     * @param playerUUID   The UUID of the player.
     * @param remoteSecret The remote secret to associate with the player.
     * @return Generated proxy secret.
     */
    @NotNull UUID setPlayerRemoteSecret(@NotNull UUID playerUUID, @NotNull UUID remoteSecret);

    /**
     * Adds a UDP proxy connection.
     *
     * @param connection The UDP proxy connection to add.
     */
    void addConnection(UdpProxyConnection connection);

    /**
     * Removes a UDP proxy connection.
     *
     * @param connection The UDP proxy connection to remove.
     * @return {@code true} if the removal was successful, {@code false} if the connection was not found.
     */
    boolean removeConnection(UdpProxyConnection connection);


    /**
     * Removes a UDP proxy connection associated with a player.
     *
     * @param player The voice proxy player whose connection should be removed.
     * @return {@code true} if the removal was successful, {@code false} if the connection was not found.
     */
    boolean removeConnection(@NotNull VoiceProxyPlayer player);

    /**
     * Retrieves a UDP proxy connection by the remote secret of the player.
     *
     * @param remoteSecret The remote secret of the player.
     * @return An optional containing the UDP proxy connection if found, otherwise empty.
     */
    Optional<UdpProxyConnection> getConnectionByRemoteSecret(UUID remoteSecret);

    /**
     * Retrieves a UDP proxy connection by any of the player's secrets.
     *
     * @param anySecret Any of the player's secrets.
     * @return An optional containing the UDP proxy connection if found, otherwise empty.
     */
    Optional<UdpProxyConnection> getConnectionByAnySecret(UUID anySecret);

    /**
     * Clears all UDP proxy connections.
     */
    void clearConnections();
}
